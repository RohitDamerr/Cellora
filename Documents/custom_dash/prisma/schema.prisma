
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]
dashboards Dashboard[]
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") // Foreign key relating to the User model
  type              String  // Provider type (e.g., 'oauth', 'email', 'credentials')
  provider          String  // Provider name (e.g., 'google', 'github')
  providerAccountId String  @map("provider_account_id") // User's ID on the provider's platform
  refresh_token     String? @db.Text // OAuth refresh token (can be long)
  access_token      String? @db.Text // OAuth access token (can be long)
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text // JWT ID token (can be long)
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId], name: "provider_providerAccountId_unique")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token") // The unique token identifying the session
  userId       String   @map("user_id") // Foreign key relating to the User model
  expires      DateTime // When the session expires

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
model VerificationToken {
  identifier String   // Typically the user's email address
  token      String   @unique // The unique verification token
  expires    DateTime // When the token expires

  @@unique([identifier, token]) // Ensure the combination is unique
  @@map("verification_tokens")
}

model Dashboard {
  id           String   @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  userId       String   @map("user_id")
  widgets      Widget[] 
  user       User @relation(fields: [userId], references: [id])

 @@map("dashboards")
}

model Widget {
  id          String @id @default(cuid())
  type        String
  gridX       Int    @map("grid_x") 
  gridY       Int    @map("grid_y") 
  gridWidth   Int    @default(1) @map("grid_width") 
  gridHeight  Int    @default(1) @map("grid_height") 

   configuration Json     @default("{}")

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  dashboardId String   @map("dashboard_id")

  dashboard Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
 @@map("widgets")
}